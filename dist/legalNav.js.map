{
  "version": 3,
  "sources": ["../bin/live-reload.js", "../src/legalNav.js"],
  "sourcesContent": ["new EventSource(`${SERVE_ORIGIN}/esbuild`).addEventListener('change', () => location.reload());\n", "// Select the container holding the anchor links\nconst anchorsContainer = document.querySelector('.legal_sidebar-links');\n\n// Collect all the anchor links\nconst anchorLinks = Array.from(anchorsContainer.querySelectorAll('a'));\n\n// Function to get the index of the anchor link that's closest to the top of the viewport\nfunction getCurrentSectionIndex() {\n  let minDistance = Infinity;\n  let closestIndex = 0;\n\n  anchorLinks.forEach((link, index) => {\n    const targetId = link.getAttribute('href');\n    const targetElement = document.querySelector(targetId);\n    const distanceFromTop = Math.abs(targetElement.getBoundingClientRect().top);\n\n    if (distanceFromTop < minDistance) {\n      minDistance = distanceFromTop;\n      closestIndex = index;\n    }\n  });\n\n  return closestIndex;\n}\n\n// Function to update the position of the current anchor link in view\nfunction updateCurrentAnchorInView() {\n  const currentSectionIndex = getCurrentSectionIndex();\n  const currentAnchor = anchorLinks[currentSectionIndex];\n  const anchorOffsetLeft = currentAnchor.offsetLeft;\n  const containerScrollLeft = anchorsContainer.scrollLeft;\n  const containerWidth = anchorsContainer.clientWidth;\n  const anchorWidth = currentAnchor.clientWidth;\n\n  if (\n    anchorOffsetLeft < containerScrollLeft ||\n    anchorOffsetLeft + anchorWidth > containerScrollLeft + containerWidth\n  ) {\n    anchorsContainer.scrollTo({\n      left: anchorOffsetLeft - containerWidth / 2 + anchorWidth / 2,\n      behavior: 'smooth',\n    });\n  }\n}\n"],
  "mappings": ";;;AAAA,MAAI,YAAY,GAAG,iCAAsB,EAAE,iBAAiB,UAAU,MAAM,SAAS,OAAO,CAAC;;;ACC7F,MAAM,mBAAmB,SAAS,cAAc,sBAAsB;AAGtE,MAAM,cAAc,MAAM,KAAK,iBAAiB,iBAAiB,GAAG,CAAC;",
  "names": []
}
